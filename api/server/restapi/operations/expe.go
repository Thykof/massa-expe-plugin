// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExpeHandlerFunc turns a function with the right signature into a expe handler
type ExpeHandlerFunc func(ExpeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExpeHandlerFunc) Handle(params ExpeParams) middleware.Responder {
	return fn(params)
}

// ExpeHandler interface for that can handle valid expe params
type ExpeHandler interface {
	Handle(ExpeParams) middleware.Responder
}

// NewExpe creates a new http.Handler for the expe operation
func NewExpe(ctx *middleware.Context, handler ExpeHandler) *Expe {
	return &Expe{Context: ctx, Handler: handler}
}

/*
	Expe swagger:route PUT /api/expe expe

Expe expe API
*/
type Expe struct {
	Context *middleware.Context
	Handler ExpeHandler
}

func (o *Expe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExpeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ExpeOKBody expe o k body
//
// swagger:model ExpeOKBody
type ExpeOKBody struct {

	// message
	// Required: true
	Message string `json:"message"`
}

// Validate validates this expe o k body
func (o *ExpeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExpeOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("expeOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this expe o k body based on context it is used
func (o *ExpeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExpeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExpeOKBody) UnmarshalBinary(b []byte) error {
	var res ExpeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
